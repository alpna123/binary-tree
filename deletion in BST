#include<stdio.h> 
#include<stdlib.h> 
   
struct node 
{ 
    int data; 
    struct node *left;
    struct node *right; 
}; 
   
   
   struct node * minvaluenode(struct node* node) 
{ 
    struct node* current = node; 
  
    while (current && current->left != NULL) 
        current = current->left; 
  
    return current; 
} 
  
struct node* deletenode(struct node* root, int key) 
{ 
    
    if (root == NULL) 
    return root; 
 
    if (key < root->data) 
        root->left = deletenode(root->left, key); 
 
    else if (key > root->data) 
        root->right = deletenode(root->right, key); 
  
    else
    { 
        if (root->left == NULL) 
        { 
            struct node *temp = root->right; 
            free(root); 
            return temp; 
        } 
        else if (root->right == NULL) 
        { 
            struct node *temp = root->left; 
            free(root); 
            return temp; 
        } 
  
        struct node* temp = minvaluenode(root->right); 
 
        root->data = temp->data; 
  
        root->right = deletenode(root->right, temp->data); 
    } 
    return root; 
} 
  
   
   
   
struct node *newnode(int item) 
{ 
    struct node *node =  (struct node *)malloc(sizeof(struct node)); 
    node->data= item; 
    node->left = node->right = NULL; 
    return node; 
} 
   

void inorder(struct node *root) 
{ 
    if (root != NULL) 
    { 
        inorder(root->left); 
        printf("%d \n", root->data); 
        inorder(root->right); 
    } 
} 
   

struct node* insert(struct node* node, int key) 
{ 
    
    if (node == NULL) return newnode(key); 
  
    if (key < node->data) 
        node->left  = insert(node->left, key); 
    else if (key > node->data) 
        node->right = insert(node->right, key);    
 
    return node; 
} 
   

int main() 
{ 
    struct node *root = NULL; 
    root = insert(root, 50); 
    insert(root, 30); 
    insert(root, 20); 
    insert(root, 40); 
    insert(root, 70); 
    insert(root, 60); 
    insert(root, 80); 
   
    
    inorder(root); 
  
    printf("\nDelete 30\n"); 
    root = deletenode(root, 30); 
    printf("Inorder traversal of the modified tree \n"); 
    inorder(root); 
  
    printf("\nDelete 50\n"); 
    root = deletenode(root, 50); 
    printf("Inorder traversal of the modified tree \n"); 
    inorder(root); 

     return (0); 
    
} 
